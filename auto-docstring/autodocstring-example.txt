#autodoc: Original code:

def profiles(nightscout, token):
    """
    Print list of profiles available in nightscout
    """
    p_list = get_profiles(nightscout, token)
    default_profile = p_list[0]["defaultProfile"]
    profile_list = p_list[0]["store"].keys()
    print("Default profile: {}".format(default_profile))
    print("Available profiles:")
    for profile in profile_list:
        print("\t" + profile)

#autodoc: A comprehensive PEP 257 Google style doctring, including a brief one-line summary of the function.

def profiles(nightscout, token):
    """Print list of profiles available in nightscout
    
    Gets profiles from nightscout, prints the default profile, and then
    prints a list of all available profiles.
    
    Args:
        nightscout (str): Nightscout URL (required)
        token (str): Nightscout token (optional)
    
    Returns:
        None
    """

#autodoc: Original code:

def display(nightscout, token, profile_name, profile_format):
    profile = get_current_profile(nightscout, token, profile_name)
    if profile_format == "nightscout":
        # display_nightscout(p_list, profile_name)
        logging.debug("Displaying profile {}".format(profile["name"]))
        print(json.dumps(profile, indent=4))
    elif profile_format == "text":
        display_text(profile)
    else:
        print(json.dumps(ns_to_oaps(profile), indent=4))

#autodoc: A comprehensive PEP 257 Google style doctring, including a brief one-line summary of the function.

def display(nightscout, token, profile_name, profile_format):
    """Display contents of a profile, in requested format
    
    Gets the profile from nightscout, and then displays it in the requested format.
    
    Args:
        nightscout (str): Nightscout URL (required)
        token (str): Nightscout token (optional)
        profile_name (str): Profile name (optional)
        profile_format (str): Profile format (optional)
    
    Returns:
        None
    """

#autodoc: Original code:
